# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Command\GenExtension:
        class: App\Command\GenExtension
        tags: ['twig.extension']

    ### Serializer ###

    Symfony\Component\Serializer\Encoder\JsonEncoder: ~

    Symfony\Component\PropertyInfo\Extractor\PhpStanExtractor: ~

    Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor: ~

    Symfony\Component\PropertyInfo\PropertyInfoExtractor:
        arguments:
            $typeExtractors:
                - '@Symfony\Component\PropertyInfo\Extractor\PhpStanExtractor'
                - '@Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor'

    Doctrine\Common\Annotations\AnnotationReader: ~

    Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader:
        arguments:
            $reader: '@Doctrine\Common\Annotations\AnnotationReader'

    Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory:
        arguments:
            $loader: '@Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader'

    Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter: ~

    Symfony\Component\Serializer\Normalizer\ObjectNormalizer:
        arguments:
            $propertyTypeExtractor: '@Symfony\Component\PropertyInfo\PropertyInfoExtractor'
            $classMetadataFactory: '@Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory'
            $nameConverter: '@Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter'

    Symfony\Component\Serializer\Normalizer\ArrayDenormalizer: ~

    Symfony\Component\Serializer\SerializerInterface:
        class: 'Symfony\Component\Serializer\Serializer'
        arguments:
            $encoders:
                - '@Symfony\Component\Serializer\Encoder\JsonEncoder'
            $normalizers:
                - '@Symfony\Component\Serializer\Normalizer\ObjectNormalizer'
                - '@Symfony\Component\Serializer\Normalizer\ArrayDenormalizer'
