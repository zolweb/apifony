{% autoescape false %}
<?php

namespace {{ abstractController.namespace }};

use RuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

abstract class AbstractController
{
    public function __construct(
        protected readonly SerializerInterface $serializer,
        protected readonly ValidatorInterface $validator,
    ) {
    }

{%~ for type in ['string', 'int', 'float', 'bool'] %}
    {%~ for nullable in [false, true] %}
    /**
     * @throws DenormalizationException
     */
    public function get{{ type|capitalize }}{{ nullable ? 'OrNull' : '' }}Parameter(
        Request $request,
        string $name,
        string $in,
        bool $required,
        ?{{ type }} $default = null,
    ): {{ nullable ? '?' : '' }}{{ type }} {
        $bag = match ($in) {
            'query' => $request->query,
            'header' => $request->headers,
            'cookie' => $request->cookies,
            default => throw new RuntimeException('Invalid parameter location.'),
        };

        $isset = $bag->has($name);
        $value = $bag->get($name);

        if (!$isset) {
            if ($required) {
                throw new DenormalizationException("Parameter '$name' in '$in' is required.");
            }

            $value = $default;
        }

        if ($value === null) {
        {%~ if nullable %}
            return null;
        {%~ else %}
            throw new DenormalizationException("Parameter '$name' in '$in' must not be null.");
        {%~ endif %}
        }

        {%~ if type is same as 'string' %}
        return $value;
        {%~ elseif type is same as 'int' %}
        if (!ctype_digit($value)) {
            throw new DenormalizationException("Parameter '$name' in '$in' must be an integer.");
        }

        return intval($value);
        {%~ elseif type is same as 'float' %}
        if (!is_numeric($value)) {
            throw new DenormalizationException("Parameter '$name' in '$in' must be a numeric.");
        }

        return floatval($value);
        {%~ elseif type is same as 'bool' %}
        if (!in_array($value, ['true', 'false'], true)) {
            throw new DenormalizationException("Parameter '$name' in '$in' must be a boolean.");
        }

        return ['true' => true, 'false' => false][$value];
        {%~ endif %}
    }

    {%~ endfor %}
{%~ endfor %}
}
{% endautoescape %}