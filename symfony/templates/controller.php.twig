<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

{% set operation = spec.paths[route][method] %}
class {{ operation.operationId|toControllerClassName }} extends AbstractController
{
    #[Route(path: '{{ route }}', methods: ['{{ method }}'])]
    public function handle(
        Request $request,
        SerializerInterface $serializer,
        ValidatorInterface $validator,
        {{ operation.operationId|toHandlerClassName }} $handler,
        {%~ for parameter in getOperationParams(spec, route, method, 'path') %}
        {{ parameter.schema.type|toPhpType }} ${{ parameter.name }},
        {%~ endfor %}
    ): Response {
        {%~ for parameter in getOperationParams(spec, route, method, 'query') %}
        ${{ parameter.name }} = $request->query->get('{{ parameter.name }}');
        {%~ endfor %}
        {%~ if operation.requestBody.content['application/json'] is defined %}
            {%~ set requestBody = operation.requestBody.content['application/json'] %}
        $contentType = $request->headers->get('content-type');
        if ($contentType !== 'application/json') {
            return new JsonResponse(
                [
                    'code' => 'unsupported_format',
                    'message' => "The value '$contentType' received in content-type header is not a supported format.",
                ],
                Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
            );
        }
        $content = $request->getContent();
            {%~ if requestBody.schema['$ref'] is defined %}
        {{ genSchema(spec, requestBody.schema['$ref']) }}$dto = $serializer->deserialize($content, {{ requestBody.schema['$ref']|toSchemaClassName }}::class, JsonEncoder::FORMAT);
            {%~ endif %}
        $violations = $validator->validate($dto);
        if (count($violations) > 0) {
            $errors = [];
            foreach ($violations as $violation) {
                $errors[$violation->getPropertyPath()][] = $violation->getMessage();
            }
            return new JsonResponse(
                [
                    'code' => 'validation_failed',
                    'message' => 'Validation has failed.',
                    'errors' => [
                        'body' => $errors,
                    ],
                ],
                Response::HTTP_BAD_REQUEST,
            );
        }
        {%~ endif %}
        $handler->handle(
        {%~ for parameter in getOperationParams(spec, route, method) %}
            ${{ parameter.name }},
        {%~ endfor %}
        {%~ if spec.paths[route][method].requestBody is defined %}
            $dto,
        {%~ endif %}
        );
        return new Response('');
    }
}

// $contentType = $request->headers->get('accept');
// if ($contentType !== 'application/json') {
// return new \Symfony\Component\HttpFoundation\JsonResponse(
// [
// 'code' => 'not_acceptable_format',
// 'message' => "The value '$contentType' received in accept header is not an acceptable format.",
// ],
// \Symfony\Component\HttpFoundation\Response::HTTP_NOT_ACCEPTABLE,
// );
// }
