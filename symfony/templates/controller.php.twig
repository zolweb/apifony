{% autoescape false %}
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\ConstraintViolationInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class {{ operation.controllerClassName }} extends AbstractController
{
    #[Route(
        path: '{{ operation.route }}',
{%~ if operation.allSortedParameters(['path']) %}
        requirements: [
    {%~ for param in operation.allSortedParameters(['path']) %}
            {{ param.routeRequirement }}
    {%~ endfor %}
        ],
{%~ endif %}
        methods: ['{{ operation.method }}'],
        priority: {{ operation.priority }},
    )]
    public function handle(
        Request $request,
        SerializerInterface $serializer,
        ValidatorInterface $validator,
        {{ operation.handlerInterfaceName }} $handler,
{%~ for param in operation.allSortedParameters(['path']) %}
        {{ param.methodParameter }},
{%~ endfor %}
    ): Response {
{%~ for param in operation.allSortedParameters(['query', 'header', 'cookie']) %}
        {{ param.toFromRequestVariableInitialization }}
{%~ endfor %}
        $errors = [];
{%~ for param in operation.allSortedParameters %}
        $violations = $validator->validate(
            ${{ param.toVariableName }},
            [
        {%~ for constraint in param.constraints %}
                {{~ constraint.instantiation(4) }},
        {%~ endfor %}
            ]
        );
        if (count($violations) > 0) {
            $errors['{{ param.in }}']['{{ param.toVariableName }}'] = array_map(
                fn (ConstraintViolationInterface $violation) => $violation->getMessage(),
                iterator_to_array($violations),
            );
        }
{%~ endfor %}
{%~ if operation.requestBody %}
        switch ($contentType = $request->headers->get('content-type', 'unspecified')) {
    {%~ for mediaType in operation.requestBody.mediaTypes %}
            case '{{ mediaType.type }}':
        {%~ if mediaType.type is same as ('application/json') %}
                $content = $request->getContent();
                $payload = $serializer->deserialize($content, Lol::class, JsonEncoder::FORMAT);
                $violations = $validator->validate($payload);
                if (count($violations) > 0) {
                    foreach ($violations as $violation) {
                        $errors['body'][$violation->getPropertyPath()][] = $violation->getMessage();
                    }
                }
        {%~ endif %}

                break;
    {%~ endfor %}
            default:
                return new JsonResponse(
                    [
                        'code' => 'unsupported_format',
                        'message' => "The value '$contentType' received in content-type header is not a supported format.",
                    ],
                    Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
                );
        }
{%~ endif %}
        if (count($errors) > 0) {
            return new JsonResponse(
                [
                    'code' => 'validation_failed',
                    'message' => 'Validation has failed.',
                    'errors' => $errors,
                ],
                Response::HTTP_BAD_REQUEST,
            );
        }
        return $handler->handle(
{%~ for param in operation.allSortedParameters %}
            ${{ param.toVariableName }},
{%~ endfor %}
{%~ if operation.requestBody %}
            $payload,
{%~ endif %}
        );
    }
}
{% endautoescape %}