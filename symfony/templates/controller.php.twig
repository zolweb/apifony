{% autoescape false %}
<?php

namespace App\Controller;

use RuntimeException;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\ConstraintViolationInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class {{ operation.controllerClassName }} extends AbstractController
{
    #[Route(
        path: '{{ operation.pathItem.route }}',
{%~ if operation.allSortedParameters(['path']) %}
        requirements: [
    {%~ for param in operation.allSortedParameters(['path']) %}
            '{{ param.name }}' => '{{ param.schema.type.routeRequirementPattern|e('phpSingleQuotedString') }}',
    {%~ endfor %}
        ],
{%~ endif %}
        methods: ['{{ operation.method }}'],
        priority: {{ operation.priority }},
    )]
    public function handle(
        Request $request,
        SerializerInterface $serializer,
        ValidatorInterface $validator,
        {{ operation.handlerInterfaceName }} $handler,
{%~ for param in operation.allSortedParameters(['path']) %}
        {{ param.schema.type.methodParameterType }} ${{ param.name }},
{%~ endfor %}
    ): Response {
    {%~ for param in operation.allSortedParameters(['path']) %}
        ${{ param.variableName }} = ${{ param.name }};
    {%~ endfor %}
{%~ for param in operation.allSortedParameters(['query', 'header', 'cookie']) %}
        ${{ param.variableName }} = {{ param.schema.type.stringToTypeCastFunction }}($request->{{ param.requestCollection }}->get('{{ param.name|e('phpSingleQuotedString') }}'{% if param.schema.default %}, {{ param.schema.type.methodParameterDefault}}{% endif %}));
{%~ endfor %}
        $errors = [];
{%~ for param in operation.allSortedParameters %}
        $violations = $validator->validate(
            ${{ param.variableName }},
            [
        {%~ for constraint in param.schema.constraints %}
                {{~ constraint.instantiation(4) }},
        {%~ endfor %}
            ]
        );
        if (count($violations) > 0) {
            $errors['{{ param.in }}']['{{ param.name }}'] = array_map(
                fn (ConstraintViolationInterface $violation) => $violation->getMessage(),
                iterator_to_array($violations),
            );
        }
    {%~ if param.required and param.in in ['query', 'header', 'cookie'] %}
        if (!$request->{{ param.requestCollection }}->has('{{ param.name|e('phpSingleQuotedString') }}')) {
            $errors['{{ param.in }}']['{{ param.name }}'][] = 'Parameter {{ param.name }} in {{ param.in }} is required.';
        }
    {%~ endif %}
{%~ endfor %}
{%~ if operation.requestBody %}
        switch ($contentType = $request->headers->get('content-type', 'unspecified')) {
    {%~ for mediaType in operation.requestBody.mediaTypes %}
            case '{{ mediaType.type }}':
        {%~ if mediaType.type is same as ('application/json') %}
                {{ mediaType.schema.type.contentInitializationFromRequest }}
                {{ mediaType.schema.type.contentValidationViolationsInitialization }}
        {%~ endif %}

                break;
    {%~ endfor %}
    {%~ if not operation.requestBody.required %}
            case 'unspecified':
                $content = null;
                $violations = [];

                break;
    {%~ endif %}
            default:
                return new JsonResponse(
                    [
                        'code' => 'unsupported_request_type',
                        'message' => "The value '$contentType' received in content-type header is not a supported format.",
                    ],
                    Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
                );
        }
        if (count($violations) > 0) {
            foreach ($violations as $violation) {
                $errors['body'][$violation->getPropertyPath()][] = $violation->getMessage();
            }
        }
{%~ endif %}
        if (count($errors) > 0) {
            return new JsonResponse(
                [
                    'code' => 'validation_failed',
                    'message' => 'Validation has failed.',
                    'errors' => $errors,
                ],
                Response::HTTP_BAD_REQUEST,
            );
        }
        $responseContentType = $request->headers->get('accept', 'unspecified');
        switch (true) {
{%~ for requestBodyContentTypeNormalizedName, requestBodyContentType in operation.allPossibleRequestBodyContentTypes %}
            case {% if requestBodyContentTypeNormalizedName is same as ('Empty') %}is_null($content){% else %}{{ requestBodyContentType.contentTypeChecking }}{% endif %}:
                $responseContent = match ($responseContentType) {
    {%~ for responseBodyContentType in operation.responseBodyContentTypes %}
                    '{{ responseBodyContentType.name }}' =>
                        $handler->handle{{ requestBodyContentTypeNormalizedName }}{{ responseBodyContentType.name }}(
        {%~ for param in operation.allSortedParameters %}
                            ${{ param.variableName }},
        {%~ endfor %}
        {%~ if requestBodyContentTypeNormalizedName is not same as ('Empty') %}
                            $content,
        {%~ endif %}
                        ),
    {%~ endfor %}
                    default =>
                        new class ($responseContentType) {
                            public readonly int $code;
                            /** @var array{code: string, message: string} */
                            public readonly array $content;
                            public function __construct(string $responseContentType)
                            {
                                $this->code = Response::HTTP_UNSUPPORTED_MEDIA_TYPE;
                                $this->content = [
                                    'code' => 'unsupported_response_type',
                                    'message' => "The value '$responseContentType' received in accept header is not a supported format.",
                                ];
                            }
                        },
                };
{%~ endfor %}
            default:
                throw new RuntimeException();
        }
    }
}
{% endautoescape %}