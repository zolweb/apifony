<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\ConstraintViolationInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class {{ className }} extends AbstractController
{
    #[Route(
        path: '{{ route }}',
        requirements: [
{%~ for param in getOperationParams(spec, route, method, ['path']) %}
            {{ toRouteRequirement(param)|raw }}
{%~ endfor %}
        ],
        methods: ['{{ method }}'],
        {#~ TODO https://spec.openapis.org/oas/latest.html#path-templating-matching #}
        priority: {{ operartion['x-priotity'] ?? 0 }},
    )]
    public function handle(
        Request $request,
        SerializerInterface $serializer,
        ValidatorInterface $validator,
        {{ handlerClassName }} $handler,
{%~ for param in getOperationParams(spec, route, method, ['path']) %}
        {{ toMethodParam(param)|raw }}
{%~ endfor %}
    ): Response {
{%~ for param in getOperationParams(spec, route, method, ['query', 'header', 'cookie']) %}
        {{ getParamFromRequest(param)|raw }}
{%~ endfor %}
        $errors = [];
{%~ for type in ['path', 'query', 'header', 'cookie'] %}
    {%~ for param in getOperationParams(spec, route, method, [type]) %}
        $violations = $validator->validate(
            ${{ toVariableName(param) }},
            [
        {%~ for constraint in getParamConstraints(param) %}
                {{ constraint|raw }}
        {%~ endfor %}
            ]
        );
        if (count($violations) > 0) {
            $errors['{{ type }}']['{{ toVariableName(param) }}'] = array_map(
                fn (ConstraintViolationInterface $violation) => $violation->getMessage(),
                iterator_to_array($violations),
            );
        }
    {%~ endfor %}
{%~ endfor %}
{%~ if operation.requestBody.content['application/json'] is defined %}
    {%~ set requestBody = operation.requestBody.content['application/json'] %}
        $contentType = $request->headers->get('content-type');
        if ($contentType !== 'application/json') {
            return new JsonResponse(
                [
                    'code' => 'unsupported_format',
                    'message' => "The value '$contentType' received in content-type header is not a supported format.",
                ],
                Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
            );
        }
        $content = $request->getContent();
    {%~ if resolveRef(spec, requestBody.schema).type is same as ('object') %}
        {{ genObjectSchema(spec, requestBody.schema, toObjectSchemaClassName(requestBody.schema, operation.operationId ~ 'RequestPayload')) }}
        $payload = $serializer->deserialize($content, {{ toObjectSchemaClassName(requestBody.schema, operation.operationId ~ 'RequestPayload') }}::class, JsonEncoder::FORMAT);
        $violations = $validator->validate($payload);
        if (count($violations) > 0) {
            foreach ($violations as $violation) {
                $errors['body'][$violation->getPropertyPath()][] = $violation->getMessage();
            }
        }
    {%~ else %}
        // TODO
    {%~ endif %}
{%~ endif %}
        if (count($errors) > 0) {
            return new JsonResponse(
                [
                    'code' => 'validation_failed',
                    'message' => 'Validation has failed.',
                    'errors' => $errors,
                ],
                Response::HTTP_BAD_REQUEST,
            );
        }
        return $handler->handle(
{%~ for param in getOperationParams(spec, route, method) %}
            ${{ toVariableName(param) }},
{%~ endfor %}
{%~ if spec.paths[route][method].requestBody is defined %}
            $payload,
{%~ endif %}
        );
    }
}

// $contentType = $request->headers->get('accept');
// if ($contentType !== 'application/json') {
// return new \Symfony\Component\HttpFoundation\JsonResponse(
// [
// 'code' => 'not_acceptable_format',
// 'message' => "The value '$contentType' received in accept header is not an acceptable format.",
// ],
// \Symfony\Component\HttpFoundation\Response::HTTP_NOT_ACCEPTABLE,
// );
// }
