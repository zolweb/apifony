{% autoescape false %}
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\ConstraintViolationInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class {{ operation.controllerClassName }} extends AbstractController
{
    #[Route(
        path: '{{ operation.pathItem.route }}',
{%~ if operation.allSortedParameters(['path']) %}
        requirements: [
    {%~ for param in operation.allSortedParameters(['path']) %}
            '{{ param.variableName }}' => '{{ param.schema.type.routeRequirementPattern|e('phpSingleQuotedString') }}'
    {%~ endfor %}
        ],
{%~ endif %}
        methods: ['{{ operation.method }}'],
        priority: {{ operation.priority }},
    )]
    public function handle(
        Request $request,
        SerializerInterface $serializer,
        ValidatorInterface $validator,
        {{ operation.handlerInterfaceName }} $handler,
{%~ for param in operation.allSortedParameters(['path']) %}
        {{ param.schema.type.methodParameterType }} ${{ param.variableName }},
{%~ endfor %}
    ): Response {
{%~ for param in operation.allSortedParameters(['query', 'header', 'cookie']) %}
        ${{ param.variableName }} = {{ param.schema.type.stringToTypeCastFunction }}($request->{{ param.requestCollection }}->{{ param.name }}{{ param.schema.default ? ', ' ~ param.schema.type.methodParameterDefault : '' }})
{%~ endfor %}
        $errors = [];
{%~ for param in operation.allSortedParameters %}
        $violations = $validator->validate(
            ${{ param.variableName }},
            [
        {%~ for constraint in param.schema.constraints %}
                {{~ constraint.instantiation(4) }},
        {%~ endfor %}
            ]
        );
        if (count($violations) > 0) {
            $errors['{{ param.in }}']['{{ param.variableName }}'] = array_map(
                fn (ConstraintViolationInterface $violation) => $violation->getMessage(),
                iterator_to_array($violations),
            );
        }
{%~ endfor %}
{%~ if operation.requestBody %}
        switch ($contentType = $request->headers->get('content-type', 'unspecified')) {
    {%~ for mediaType in operation.requestBody.mediaTypes %}
            case '{{ mediaType.type }}':
        {%~ if mediaType.type is same as ('application/json') %}
                {{ mediaType.schema.type.contentInitializationFromRequest }}
                {{ mediaType.schema.type.contentValidationViolationsInitialization }}
        {%~ endif %}

                break;
    {%~ endfor %}
    {% if not operation.requestBody.required %}
            case 'unspecified':
                $content = null;
                $violations = [];

                break;
    {% endif %}
            default:
                return new JsonResponse(
                    [
                        'code' => 'unsupported_request_type',
                        'message' => "The value '$contentType' received in content-type header is not a supported format.",
                    ],
                    Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
                );
        }
        if (count($violations) > 0) {
            foreach ($violations as $violation) {
                $errors['body'][$violation->getPropertyPath()][] = $violation->getMessage();
            }
        }
{%~ endif %}
        if (count($errors) > 0) {
            return new JsonResponse(
                [
                    'code' => 'validation_failed',
                    'message' => 'Validation has failed.',
                    'errors' => $errors,
                ],
                Response::HTTP_BAD_REQUEST,
            );
        }
        switch (true) {
{%~ for requestBodyType in operation.requestBodyContentTypes %}
            case {{ requestBodyType.contentTypeChecking }}:
                switch ($contentType = $request->headers->get('accept', 'unspecified')) {
    {%~ for responseBodyContentType in operation.responseBodyContentTypes %}
                    case {{ responseBodyContentType }}:
                        return $handler->handle(
                            {%~ for param in operation.allSortedParameters %}
                                ${{ param.toVariableName }},
                            {%~ endfor %}
                            {%~ if operation.requestBody %}
                                $content,
                            {%~ endif %}
                        );

                        break;
    {%~ endfor %}
                    default:
                        return new JsonResponse(
                            [
                                'code' => 'unsupported_response_type',
                                'message' => "The value '$contentType' received in accept header is not a supported format.",
                            ],
                            Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
                        );
                }

                break;
{%~ endfor %}
        }
    }}
}}
{% endautoescape %}