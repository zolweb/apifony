{% autoescape false %}
<?php

namespace {{ file.namespace }};

use RuntimeException;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\ConstraintViolationInterface;
{% for usedFile in file.usedPhpClassFiles %}
use {{ usedFile.namespace }}\{{ usedFile.className }};
{% endfor %}

class {{ file.className }} extends AbstractController
{
    private {{ file.handler.className }} $handler;

    public function setHandler({{  file.handler.className }} $handler): void
    {
        $this->handler = $handler;
    }

{%~ for action in file.actions %}
    public function {{ action.name }}(
        Request $request,
{%~ for param in action.parameters(['path']) %}
        {{ param.type.methodParameterType }} ${{ param.parameter.name }},
{%~ endfor %}
    ): Response {
    {%~ for param in action.parameters %}
        ${{ param.variableName }} = ${{ param.parameter.name }};
    {%~ endfor %}
{%~ for param in action.parameters(['query', 'header', 'cookie']) %}
        ${{ param.variableName }} = {{ param.type.stringToTypeCastFunction }}($request->{{ param.requestCollection }}->get('{{ param.parameter.name|e('phpSingleQuotedString') }}'{% if param.parameter.schema.default %}, {{ param.type.methodParameterDefault}}{% endif %}));
{%~ endfor %}
        $errors = [];
{%~ for param in action.parameters %}
        $violations = $this->validator->validate(
            ${{ param.variableName }},
            [
        {%~ for constraint in param.type.constraints %}
                {{~ constraint.instantiation(4) }},
        {%~ endfor %}
            ]
        );
        if (count($violations) > 0) {
            $errors['{{ param.parameter.in }}']['{{ param.parameter.name }}'] = array_map(
                fn (ConstraintViolationInterface $violation) => $violation->getMessage(),
                iterator_to_array($violations),
            );
        }
    {%~ if param.parameter.required and param.parameter.in in ['query', 'header', 'cookie'] %}
        if (!$request->{{ param.requestCollection }}->has('{{ param.parameter.name|e('phpSingleQuotedString') }}')) {
            $errors['{{ param.parameter.in }}']['{{ param.parameter.name }}'][] = 'Parameter {{ param.parameter.name }} in {{ param.parameter.in }} is required.';
        }
    {%~ endif %}
{%~ endfor %}
{%~ if action.requestBody %}
        switch ($requestBodyPayloadContentType = $request->headers->get('content-type', 'unspecified')) {
    {%~ for mediaType in action.requestBody.mediaTypes %}
            case '{{ mediaType.type }}':
        {%~ if mediaType.type is same as ('application/json') %}
                {{ mediaType.schema.type.requestBodyPayloadInitializationFromRequest }}
                {{ mediaType.schema.type.requestBodyPayloadValidationViolationsInitialization }}
        {%~ endif %}

                break;
    {%~ endfor %}
    {%~ if not action.requestBody.required %}
            case 'unspecified':
                $requestBodyPayload = null;
                $violations = [];

                break;
    {%~ endif %}
            default:
                return new JsonResponse(
                    [
                        'code' => 'unsupported_request_type',
                        'message' => "The value '$requestBodyPayloadContentType' received in content-type header is not a supported format.",
                    ],
                    Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
                );
        }
        if (count($violations) > 0) {
            foreach ($violations as $violation) {
                $errors['body'][$violation->getPropertyPath()][] = $violation->getMessage();
            }
        }
{%~ endif %}
        if (count($errors) > 0) {
            return new JsonResponse(
                [
                    'code' => 'validation_failed',
                    'message' => 'Validation has failed.',
                    'errors' => $errors,
                ],
                Response::HTTP_BAD_REQUEST,
            );
        }
        $responsePayloadContentType = $request->headers->get('accept', 'unspecified');
        switch (true) {
{%~ for requestBodyPayloadTypeNormalizedName, requestBodyPayloadType in action.allPossibleRequestBodyPayloadTypes %}
            case {% if requestBodyPayloadType is null %}is_null($requestBodyPayload){% else %}{{ requestBodyPayloadType.requestBodyPayloadTypeChecking }}{% endif %}:
                $responsePayload = match ($responsePayloadContentType) {
    {%~ for responseContentTypeNormalizedName, responseContentType in action.allPossibleResponseContentTypes %}
                    {% if responseContentType is null %}null{% else %}'{{ responseContentType }}'{% endif %} =>
                        $this->handler->{{ action.operationId|u.camel }}From{{ requestBodyPayloadTypeNormalizedName }}PayloadTo{{ responseContentTypeNormalizedName }}Content(
        {%~ for param in action.allSortedParameters %}
                            ${{ param.variableName }},
        {%~ endfor %}
        {%~ if requestBodyPayloadType is not null %}
                            $requestBodyPayload,
        {%~ endif %}
                        ),
    {%~ endfor %}
                    default => (object) [
                        'code' => Response::HTTP_UNSUPPORTED_MEDIA_TYPE,
                        'content' => [
                            'code' => 'unsupported_response_type',
                            'message' => "The value '$responsePayloadContentType' received in accept header is not a supported format.",
                        ],
                    ],
                };

                break;
{%~ endfor %}
            default:
                throw new RuntimeException();
        }
        switch ($responsePayload::CONTENT_TYPE) {
{%~ for responseContentType in action.allPossibleResponseContentTypes %}
            case {% if responseContentType is null %}null{% else %}'{{ responseContentType }}'{% endif %}:
    {%~ if responseContentType is null %}
                return new Response('', $responsePayload::CODE, $responsePayload->getHeaders());
    {%~ elseif responseContentType is same as ('application/json') %}
                return new JsonResponse($responsePayload->payload, $responsePayload::CODE, $responsePayload->getHeaders());
    {%~ endif %}
{%~ endfor %}
            default:
                throw new RuntimeException();
        }
    }
    {%~ if not loop.last %}

    {%~ endif %}
{%~ endfor %}
}
{% endautoescape %}